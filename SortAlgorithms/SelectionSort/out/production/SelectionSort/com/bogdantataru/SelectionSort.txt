
Selection Sort Algorithm

This algorithm divides the array into sorted and unsorted partitions just like bubble sort does.
And what we do is we traverse the array and we look for the largest element in the unsorted partition.
And when we find it, we swap it with the last element in the unsorted partition. And at that point,
that swapped element will be its correct sorted position.
And so just like with bubble sort, at the beginning of the algorithm, the entire array is unsorted
so the last unsorted index is 6 and just like with bubble sort we're going to grow the sorted partition from right to left.
We're going to initialise a largest field to zero so when we start we say you know what, 20 is the largest element that we know about so far,
so whatever is at position zero will be the largest element. And we're going to start by comparing the element at position one
to whatever is at position zero, so we're gonna start with i equal to one. We're going to use i to traverse the unsorted partition
and find the largest element
And at this point, i is equal to the last unsorted index and so we have completed our first traversal of the array.
So we're going to swap the largest element that we found in the unsorted partition and that's at position four with the last element
in the unsorted partition and that's at position six. So what we're gonna do is swap 55 and minus 22 and we have now completed our first traversal.
And at this point, 55 is in its correct sorted position and so we're gonna decrement last unsorted index to five and we're gonna re-initialize i to one
and we're going to say the largest element in the unsorted partition is at position zero and we repeat the process.

lastUnsortedIndex = 6 - this is the last index of the unsorted partition

i= 1- index used to traverse the array from left to right

largest = 0 - index of largest element in unsorted partition

On each traversal of the array, it selects the largest value and it adds it into the sorted partition.
